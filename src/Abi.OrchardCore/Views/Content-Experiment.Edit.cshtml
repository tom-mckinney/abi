@using OrchardCore.DisplayManagement.Zones
@inject Abi.Data.IVisitorRepository visitorRepository
@inject Abi.Data.ISessionRepository sessionRepository
@inject Abi.Data.IVariantRepository variantRepository
@inject Abi.Data.IEncounterRepository encounterRepository
@{
    var tabs = (IEnumerable<string>)ZoneShapes.HarvestAndSortTabs(Model.Parts);

    var visitors = await visitorRepository.GetAllAsync();
    var sessions = await sessionRepository.GetAllAsync();
    var variants = await variantRepository.GetAllAsync();
    var encounters = await encounterRepository.GetAllAsync();
}

<style asp-src="~/OrchardCore.Contents/Styles/Contents.min.css" debug-src="~/OrchardCore.Contents/Styles/Contents.css"></style>

<div class="edit-container">
    <div class="edit-body">
        <div class="edit-item-primary">

            <div class="card">
                <div class="card-header">
                    Results
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <dl>
                                <dt>Visitors</dt>
                                <dd>@visitors.Count()</dd>

                                <dt>Sessions</dt>
                                <dd>@sessions.Count()</dd>

                                <dt>Encounters</dt>
                                <dd>@encounters.Count()</dd>
                            </dl>
                        </div>
                        <div class="col-6">
                            <table>
                                <tbody>
                                    @foreach (var variant in variants)
                                    {
                                        var encountersForVariant = encounters.Where(e => e.VariantId == variant.VariantId);

                                        <tr>
                                            <td>@variant.VariantId</td>
                                            <td>@encountersForVariant.Count() views</td>
                                            <td>@(encountersForVariant.Count() / encounters.Count()) % of views</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <br />

            @if (Model.Content != null)
            {
                <div class="edit-item-content">
                    @await DisplayAsync(Model.Content)
                </div>
            }
        </div>
        <div class="edit-item-parts">
            @if (tabs.Any())
            {
                @await DisplayAsync(await New.LocalNavigation(ContentItem: Model.ContentItem, Tabs: tabs))
            }
            @if (Model.Parts != null)
            {
                @await DisplayAsync(Model.Parts)
            }
        </div>

        <div class="edit-item-secondary group">
            <div class="edit-item-actions form-group">
                @await DisplayAsync(Model.Actions)

                @{
                    var returnUrl = Context.Request.Query["returnUrl"];
                }

                @if (!String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
                {
                    <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
                }
            </div>
        </div>
    </div>
    @if (Model.Sidebar != null)
    {
        <div class="edit-sidebar-handler"></div>
        <div class="edit-sidebar group">
            @await DisplayAsync(Model.Sidebar)
        </div>
    }
</div>

@if (!String.IsNullOrWhiteSpace(Context.Request.Query["returnUrl"]))
{
    @Html.Hidden("returnUrl", Context.Request.Query["returnUrl"])
}
